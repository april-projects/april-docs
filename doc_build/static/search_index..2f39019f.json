[{"id":0,"title":"常用编程技巧和代码规范总结","routePath":"/guide/basic/","lang":"","toc":[{"text":"一、前言","id":"一前言","depth":2,"charIndex":3},{"text":"二、Java 编码规范","id":"二java-编码规范","depth":2,"charIndex":181},{"text":"三、编程技巧（补充）","id":"三编程技巧补充","depth":2,"charIndex":280},{"text":"一、注释规范","id":"一注释规范","depth":3,"charIndex":294},{"text":"注释配置","id":"注释配置","depth":4,"charIndex":342},{"text":"二、建表规范","id":"二建表规范","depth":3,"charIndex":603},{"text":"三、查询规范","id":"三查询规范","depth":3,"charIndex":851},{"text":"四、返回规范","id":"四返回规范","depth":3,"charIndex":1108},{"text":"五、增删改查返回规范","id":"五增删改查返回规范","depth":3,"charIndex":1574},{"text":"六、接口规范","id":"六接口规范","depth":3,"charIndex":1777},{"text":"七、枚举定义规范","id":"七枚举定义规范","depth":3,"charIndex":2309},{"text":"八、编码技巧","id":"八编码技巧","depth":3,"charIndex":2486},{"text":"成员变量","id":"成员变量","depth":4,"charIndex":2495},{"text":"异常处理","id":"异常处理","depth":4,"charIndex":2545},{"text":"工具类使用：","id":"工具类使用","depth":4,"charIndex":2604},{"text":"集合处理","id":"集合处理","depth":4,"charIndex":2672},{"text":"对象实体转换","id":"对象实体转换","depth":4,"charIndex":2753},{"text":"四、代码提交","id":"四代码提交","depth":2,"charIndex":2883},{"text":"idea 忽略文件：","id":"idea-忽略文件","depth":3,"charIndex":2893},{"text":"提交规范","id":"提交规范","depth":3,"charIndex":3008}],"domain":"","content":"#\n\n\n一、前言#\n\n> April（四月）\n> 是以我的猫咪命名的一个开源团队，创立初衷是为了孵化一些项目到社区，意味着后续也会接受来自其他代码贡献者的代码，但是如果代码贡献者的编程风格与 April\n> 的不一致，会给代码阅读者和其他代码提交者造成不小的困扰. April因此总结了这份编程风格指南, 使所有提交代码的人都能获知 April 的编程风格.\n\n\n二、Java 编码规范#\n\nJava 编程规范主要以阿里巴巴代码规约为主 ( GitHub 无法预览 PDF，可以 clone 本仓库，使用 typora 可以以 PDF\n方式查看下面的文档)\n\n\n三、编程技巧（补充）#\n\n\n一、注释规范#\n\n * 禁用行尾注释\n * 方法或常量，成员变量，禁单行注释，应使用文档注释\n\n注释配置#\n\n> File | Settings | Editor | File and Code Templates，依次配置 Files 下面的 Class\n> interface enum record @interface\n\n * 类注释模板\n\n\n\n * 枚举注释模板\n\n\n\n * 接口注释模板\n\n\n\n * 注解注释模板\n\n\n\n * 安全类\n\n\n\n--------------------------------------------------------------------------------\n\n\n二、建表规范#\n\n * 遵循三大范式\n * 复杂字段之间用 （_） 下划线相隔，如（create\\_time，user_name）\n * 禁止使用外键关联\n * 主键字段使用（bigint）类型，Java 对应类型使用 Long 类型\n * 日期类型字段是 （datetime），Java对应 LocalDateTime 类型\n\n--------------------------------------------------------------------------------\n\n\n三、查询规范#\n\n * 列表查询\n\n> 所有的列表查询都需要添加排序，已最后添加的数据显示在第一列，以 date_time 类型作为排序字段，如（创建时间create_time ）\n\n * 操作集合尽量使用 stream 和 lambda 表达式,工具类地址（com.mobaijun.common.collection.StreamUtil）\n\n--------------------------------------------------------------------------------\n\n\n四、返回规范#\n\n>  * 项目中定义了R返回类，目录地址（com.mobaijun.common.result）\n>    \n>    * R.ok(T) 成功返回\n>    * R.ok(T data, String message) 成功返回自定义消息\n>    * R.failed(HttpStatus failMsg); 失败返回自定义状态码\n>    * R.failed(HttpStatus failMsg, String message); 失败返回自定义状态码和自定义消息\n>    \n>    返回示例：\n>    \n>    \n> \n>  * 项目中返回只能在 controller 层进行操作，禁止在业务层（service）返回\n> \n>  * 业务层如果需要异常处理，使用 throw new Exception(\"\") 进行处理;\n\n--------------------------------------------------------------------------------\n\n\n五、增删改查返回规范#\n\n * 新增：返回 boolean 类型或对象\n * 修改：返回 boolean 类型或对象\n * 删除：返回 int 类型\n * 查询：返回 List 类型或 Entity 类型\n * 批量：返回 int 类型\n\n--------------------------------------------------------------------------------\n\n\n六、接口规范#\n\n * 类定义信息为 @Api(tags = {\"一级目录-二级目录-业务类型\"}, description = \"具体描述\")\n * 查询使用：@GetMapping(value = \"/${methodName}\")\n * 新增使用：@PostMapping(value = \"/${methodName}\")\n * 修改使用：@PutMapping(value = \"/${methodName}\")\n * 单个删除：@DeleteMapping(value = \"/${methodName}\")\n * 批量删除：@DeleteMapping(value = \"/${methodName}\")\n\n> 命名规则：\n> \n>  * 单个删除（singleDelete）\n>  * 批量删除（batchDelete）\n>  * 新增 （insert[Entity]）\n>  * 修改 （update[Entity]）\n>  * 查询 （select[Entity]List）\n\n--------------------------------------------------------------------------------\n\n\n七、枚举定义规范#\n\n 1. 枚举如果没有set方法，属性需要使用 final 定义；\n 2. 枚举每个字段需包含文档注释\n 3. 枚举属性全部定义为大写，多个单纯之间以下划线分割\n\n\n\n--------------------------------------------------------------------------------\n\n\n八、编码技巧#\n\n成员变量#\n\n * 成员变量禁用 idea 告警关键字，例如\n   * width、height\n\n异常处理#\n\n> 如遇到多资源关闭应使用（try-with-resources）语法\n\n * 参考链接传送地址\n\n\n\n工具类使用：#\n\n非必要不新增工具类，以 kjs-common 包工具类为准，大多数场景已经可以完全应付\n\n\n\n * 依赖关系图\n\n\n\n集合处理#\n\n集合处理使用 Java 8 新特性 lambda 结合 Stream 操作，例如：\n\n\n\n> 上方代码来自 april-wallpaper 项目\n\n对象实体转换#\n\n对象之间的属性赋值应该使用 mapstruct 进行转换，示例代码：\n\n\n\n--------------------------------------------------------------------------------\n\n\n四、代码提交#\n\n\nidea 忽略文件：#\n\n> File | Settings | Editor | File Types\n> \n> 忽略掉 |*.iml |.idea |.mvn |.mvnw |mvnw |mvnw.cmd |target\n\n\n提交规范#\n\n主要以 GitMoji 规范为主，gitmoji 是一个标准化和解释在GitHub提交消息上使用 emoji 的倡议。 gitmoji\n是一个开源项目，专门规定了在 github 提交代码时应当遵循的 emoji 规范，在 git commit上使用 emoji\n提供了一种简单的方法，仅通过查看所使用的表情符号来确定提交的目的或意图。\n\n在执行 git commit 指令时使用 emoji 图标为本次提交添加一个特别的图标，\n这个本次提交的记录很容易突出重点，或者说光看图标就知道本次提交的目的。这样就方便在日后查看历史提交日子记录中快速的查找到对于的提交版本。由于有很多不同的表情符号\n，表情库更新后，没有一个可以帮助更轻松地使用表情符号的中文表情库列表。\n\n提交示例，图标地址传送门\n\n","frontmatter":{},"version":""},{"id":1,"title":"介绍","routePath":"/guide/","lang":"","toc":[{"text":"April","id":"april","depth":2,"charIndex":3},{"text":"前言","id":"前言","depth":2,"charIndex":255},{"text":"项目仓库","id":"项目仓库","depth":2,"charIndex":633},{"text":"加入我们","id":"加入我们","depth":2,"charIndex":1350}],"domain":"","content":"#\n\n\nApril#\n\nApril\n组织致力于为项目的迅速发展提供一系列全面而强大的基础能力，以便用户能够在满足项目需求的同时迅速、灵活地进行功能的拓展。我们致力于构建一个开放而创新的生态系统，为\n开发者提供高效、可靠的工具和资源，帮助他们更轻松地实现项目的快速迭代和卓越发展。我们的目标是为用户创造一个富有活力的开发环境，使他们能够在不断变化的技术和市场要\n求中保持敏捷和竞争力。通过整合丰富的基础能力，April 为开发者提供了一个稳固的基础，助力他们专注于项目的核心创新，实现更快、更灵活的产品交付。\n\n\n前言#\n\n在使用其他后台管理脚手架进行开发时，常常会遇到由于项目业务需求需要进行二次开发的情况。然而，在长时间的开发过程中，一旦源项目进行迭代升级，同步更新变得十分困难。\n\n因此，April 组织建议在项目开发中采用依赖的方式引入 April 组织提供的所有功能。这样，在后续跟随 April\n组织版本升级时，只需修改相应的依赖版本号，即可轻松完成同步更新。\n\nApril 已将所有 JAR 包推送至中央仓库，并为每个版本升级提供了相应的 SQL 改动文件。\n\n如果在使用过程中遇到必须通过二次开发修改源码才能解决的问题或实现特定功能的情况，我们欢迎您提出 issues。若这个功能具有通用性，我们将考虑为 April\n添加相应的能力，同时也欢迎您直接提交 PR 进行改动。我们致力于创建一个开放、灵活且与时俱进的开发环境，共同推动项目的进步与创新。\n\n\n项目仓库#\n\n项目                       描述                                                            GITHUB\napril-wallpaper          一个每日自动拉取壁纸写入readme文件的程序                                       april-projects/april-wallpaper: 一个每日自动拉取壁纸写入readme文件的程序\napril-zh-hotspot-push    利用GitHub actions                                              april-projects/april-zh-hotspot-push: 知乎热点推送\n                         自动爬取知乎每日热榜50条，目前已支持接入钉钉机器人，飞书机器人.(本地jdk版本最低11)\napril-script-and-tools   该项目旨在提供一些常用的 Shell 脚本 和 批处理脚本，用于自动化工作流程、软件包管理、漏洞修复以及代码质量提升。   april-projects/april-script-and-tools: Commonly used shell\n                                                                                       scripts and batch scripts at work\n\n\n加入我们#\n\n欢迎加入我们！我们正在寻找具备专业前端和多语言开发经验的优秀开发者，无论您擅长哪种语言，只要您对开源充满热情，我们都欢迎您的加入。\n\n如果您对项目的发展充满热情，愿意为开源事业贡献自己的力量，并且不介意目前项目是无报酬的，我们期待您的参与。您可以通过微信联系我们，微信号：[kjs-mobaij\nun]。\n\n加入我们的团队，您将有机会参与到创新的项目中，与志同道合的开发者共同探讨和推动开源技术的发展。期待您的加入，共同打造更加开放、充满活力的开发社区！","frontmatter":{},"version":""}]